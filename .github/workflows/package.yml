on:
  push:

jobs:
  package:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cpu:
          - ath79-generic
          - bcm27xx-bcm2708
          - mvebu-cortexa9
          - ramips-mt7621
          - x86-64
        version:
          - 23.05.3
    steps:
      - name: Install golang
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: vars
        id: vars
        env:
          CPU: ${{ matrix.cpu }}
          OPENWRT_VERSION: ${{ matrix.version }}
        shell: bash
        run: |
          SDK_FILENAME=$(curl -s https://downloads.openwrt.org/releases/${{ env.OPENWRT_VERSION }}/targets/${CPU/-/\/}/ | awk '/-sdk-${{ env.OPENWRT_VERSION }}/' | sed -r 's/.*href="([^"]+).*/\1/g' )
          echo "SDK_URL=https://downloads.openwrt.org/releases/${{ env.OPENWRT_VERSION }}/targets/${CPU/-/\/}/${SDK_FILENAME}" | tee -a "${GITHUB_OUTPUT}"
          echo "SDK_PACKAGE_NAME=${SDK_FILENAME}" | tee -a "${GITHUB_OUTPUT}"
          echo "FEED_URL=https://github.com/openwrt/packages/archive/refs/heads/openwrt-${OPENWRT_VERSION%.*}.zip" | tee -a "${GITHUB_OUTPUT}"
          echo "FEED_FILENAME=openwrt-${OPENWRT_VERSION%.*}.zip" | tee -a "${GITHUB_OUTPUT}"

      - name: Cache SDK
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ${{ steps.vars.outputs.SDK_PACKAGE_NAME }}
          key: ${{ steps.vars.outputs.SDK_PACKAGE_NAME }}

      - name: Grab uncached resources
        env:
          SDK_URL: ${{ steps.vars.outputs.SDK_URL }}
          SDK_PACKAGE_NAME: ${{ steps.vars.outputs.SDK_PACKAGE_NAME }}
        shell: bash
        run: |
          if [[ "${{ steps.cache-sdk.outputs.cache-hit }}" != "true" ]]; then
            echo "Downloading ${SDK_URL} to ${SDK_PACKAGE_NAME}"
            wget -q -c "${SDK_URL}" -O "${SDK_PACKAGE_NAME}"
          fi

      - name: Prepare SDK
        env:
          SDK_PACKAGE_NAME: ${{ steps.vars.outputs.SDK_PACKAGE_NAME }}
          SDK_TMP: "${{ github.workspace }}/sdk"
        shell: bash
        run: |
          echo "::group:: Update/install packages"
          sudo apt-get update
          sudo apt-get install -y rsync
          echo "::endgroup::"
          #set -x
          mkdir ${SDK_TMP}
          cd ${SDK_TMP}
          file "${GITHUB_WORKSPACE}/${SDK_PACKAGE_NAME}"
          tar --strip-components=1 -Jxf "${GITHUB_WORKSPACE}/${SDK_PACKAGE_NAME}" "${SDK_PACKAGE_NAME%.*.*}/"
          #git clone --depth 1 https://github.com/kuoruan/openwrt-upx.git package/openwrt-upx
          echo "src-git openwrt_upx https://github.com/kuoruan/openwrt-upx.git" >> feeds.conf.default

      - name: Cache feed - base
        id: cache-feed-base
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/sdk/feeds/base"
          key: "${{ steps.vars.outputs.SDK_PACKAGE_NAME }}-feeds-base"
      - name: Cache feed - packages
        id: cache-feed-packages
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/sdk/feeds/packages"
          key: "${{ steps.vars.outputs.SDK_PACKAGE_NAME }}-feeds-packages"
      - name: Cache feed - luci
        id: cache-feed-luci
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/sdk/feeds/luci"
          key: "${{ steps.vars.outputs.SDK_PACKAGE_NAME }}-feeds-luci"
      - name: Cache feed - routing
        id: cache-feed-routing
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/sdk/feeds/routing"
          key: "${{ steps.vars.outputs.SDK_PACKAGE_NAME }}-feeds-routing"
      - name: Cache feed - telephony
        id: cache-feed-telephony
        uses: actions/cache@v4
        with:
          path: "${{ github.workspace }}/sdk/feeds/telephony"
          key: "${{ steps.vars.outputs.SDK_PACKAGE_NAME }}-feeds-telephony"

      - name: Prep feeds
        env:
          SDK_TMP: "${{ github.workspace }}/sdk"
          ARTIFACT_DIR: "${{ github.workspace }}/artifacts"
        shell: bash
        run: |
          if [[ ! -d "${ARTIFACT_DIR}" ]]; then
            mkdir -p "${ARTIFACT_DIR}"
          fi
          cd "${SDK_TMP}"
          echo "src-git ${{ github.repository_owner }} ${{ github.repositoryUrl }}" | sed 's#git://#https://#g' >> feeds.conf.default
          echo "::group::feeds.conf.default"
          cat feeds.conf.default
          echo "::endgroup::"
          for x in $(awk '{print $2}' feeds.conf.default); do
            if [[ ! -d "${SDK_TMP}/feeds/${x}" ]]; then
              echo "::group::Updating feed - ${x}"
              ./scripts/feeds update ${x}
              echo "::endgroup::"
            fi
          done

      - name: Build packages
        if: true
        env:
          SDK_TMP: "${{ github.workspace }}/sdk"
          ARTIFACT_DIR: "${{ github.workspace }}/artifacts"
        shell: bash
        run: |
          #set -x
          cd "${SDK_TMP}"
          echo "::group::make defconfig"
          make defconfig
          echo "::endgroup::"
          echo "::group::Install feed ${{ github.repository_owner }}"
          ./scripts/feeds install -a -p ${{ github.repository_owner }}
          echo "::endgroup::"
          echo "::group::Package List?"
          find package/feeds/${{ github.repository_owner }} -mindepth 1 -maxdepth 1 -type d -follow
          echo "::endgroup::"
          for x in $(find package/feeds/${{ github.repository_owner }} -mindepth 1 -maxdepth 1 -type d -follow); do
            #make package/${{matrix.package}}/compile V=s
            echo "::group:: Compiling ${x}"
            make ${x}/compile V=s
            echo "::endgroup::"
          done
          echo "::group:: /bin/packages"
          find "${SDK_TMP}/bin/packages" -name *.ipk -exec cp -n {} ${ARTIFACT_DIR} \;
          echo "::endgroup::"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.version }}-${{ matrix.cpu }}
          path: "${{ github.workspace }}/artifacts"
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: package
    strategy:
      fail-fast: false
      matrix:
        version:
          - 23.05.3
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages
          pattern: ${{ matrix.version }}-*
          merge-multiple: true

      - name: Generate repository meta
        shell: bash
        run: |
          git clone --depth 1 git://git.yoctoproject.org/opkg-utils ${GITHUB_WORKSPACE}/opkg-utils
          cd packages
          echo "::group::Generate index"
          ${GITHUB_WORKSPACE}/opkg-utils/opkg-make-index . | awk '!/Lost field/' > "Packages"
          echo "::endgroup::"
          cd ${GITHUB_WORKSPACE}
          rm -R "${GITHUB_WORKSPACE}/opkg-utils"
          echo "::group::Packages"
          cat packages/Packages
          echo "::endgroup::"
          echo "::group::find"
          find .
          echo "::endgroup::"
